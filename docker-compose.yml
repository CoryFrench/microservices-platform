version: '3.8'

services:
  # Reverse Proxy / API Gateway
  reverse-proxy:
    build:
      context: ./reverse-proxy
    container_name: microservices-gateway
    ports:
      - "0.0.0.0:80:80"     # HTTP port
      - "0.0.0.0:443:443"   # HTTPS port
      - "0.0.0.0:8080:80"   # Alternative port
    environment:
      - API_KEY=${API_KEY}
    volumes:
      - ./ssl-certs:/etc/letsencrypt:ro
      - ./ssl-webroot:/var/www/certbot:ro
    depends_on:
      - chatgpt-daily-server
      - agent-directory
      - calendar-backend
      - photo-calendar
      - youtube-summary
      - lead-research
      - send-email
      - uptime-kuma
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    labels:
      - "description=API Gateway for microservices platform"

  # ChatGPT Daily Server
  chatgpt-daily-server:
    build:
      context: ./chatgpt-daily-server
    container_name: chatgpt-daily-app
    ports:
      - "0.0.0.0:14000:14000"
    environment:
      # Database Configuration (for UUID authentication)
      - DB_HOST=${DB_HOST:-10.0.2.221}
      - DB_PORT=${DB_PORT:-5432}
      - DB_NAME=${DB_NAME:-postgres}
      - DB_USER=${DB_USER:-postgres}
      - DB_PASSWORD=${DB_PASSWORD:-Waterfront#1}
      # Microsoft Graph API credentials
      - TENANT_ID=${MS_GRAPH_TENANT_ID}
      - CLIENT_ID=${MS_GRAPH_CLIENT_ID}
      - CLIENT_SECRET=${MS_GRAPH_CLIENT_SECRET}
      # Jira Configuration
      - JIRA_API_KEY=${JIRA_API_KEY}
      - JIRA_EMAIL=${JIRA_EMAIL}
      - JIRA_PROJECT_KEY=${JIRA_PROJECT_KEY}
      - JIRA_URL=${JIRA_URL}
      # Flask Configuration
      - FLASK_ENV=${FLASK_ENV:-production}
      - DEBUG=${DEBUG:-false}
      - PORT=14000
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:14000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    labels:
      - "description=ChatGPT Daily GPT Server"

  # Agent Directory
  agent-directory:
    build:
      context: ./agent-directory
    container_name: agent-directory-app
    ports:
      - "0.0.0.0:14100:14100"
    environment:
      # Database configuration
      - DB_USER=${DB_USER:-postgres}
      - DB_PASSWORD=${DB_PASSWORD:-Waterfront#1}
      - DB_HOST=${DB_HOST:-10.0.2.221}
      - DB_PORT=${DB_PORT:-5432}
      - DB_NAME=${DB_NAME:-postgres}
      # Application configuration
      - PORT=14100
      - NODE_ENV=${NODE_ENV:-production}
      - DIRECTORY_PASSWORD=${DIRECTORY_PASSWORD:-soldbywaterfront}
      - SESSION_SECRET=${SESSION_SECRET:-waterfront-directory-secret}
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:14100/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    labels:
      - "description=Agent Directory Service"

  # Calendar Backend
  calendar-backend:
    build:
      context: ./calendar-backend
    container_name: calendar-backend-app
    ports:
      - "0.0.0.0:14201:5000"  # Internal port might be 5000, exposed as 14201
    environment:
      # Microsoft Graph API credentials (mapping from .env file)
      - TENANT_ID=${MS_GRAPH_TENANT_ID}
      - CLIENT_ID=${MS_GRAPH_CLIENT_ID}
      - CLIENT_SECRET=${MS_GRAPH_CLIENT_SECRET}
      # Google Maps/Routes API
      - ROUTES_API_KEY=${ROUTES_API_KEY}
      # Database configuration
      - DB_USER=${DB_USER:-postgres}
      - DB_PASSWORD=${DB_PASSWORD:-Waterfront#1}
      - DB_HOST=${DB_HOST:-10.0.2.221}
      - DB_PORT=${DB_PORT:-5432}
      - DB_NAME=${DB_NAME:-postgres}
      # SMTP configuration (if needed)
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_SECURE=${SMTP_SECURE}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      # Server configuration
      - PORT=5000
      - NODE_ENV=${NODE_ENV:-production}
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    labels:
      - "description=Calendar Backend API"

  # Photo Calendar Frontend
  photo-calendar:
    build:
      context: ./photo-calendar
    container_name: photo-calendar-app
    ports:
      - "0.0.0.0:14202:80"  # React app typically runs on port 80 in container
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    labels:
      - "description=Photo Calendar Frontend Application"

  # YouTube Summary Service
  youtube-summary:
    build:
      context: ./youtube_summary
    container_name: youtube-summary-app
    ports:
      - "0.0.0.0:14300:14300"
    environment:
      # OpenAI API configuration
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      # Optional email configuration (can also be passed in requests)
      - MAILCHIMP_API_KEY=${MAILCHIMP_API_KEY}
      - FROM_EMAIL=${FROM_EMAIL}
      - TO_EMAIL=${TO_EMAIL}
      - CC_EMAILS=${CC_EMAILS}
      # Flask configuration
      - FLASK_ENV=${FLASK_ENV:-production}
      - PORT=14300
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:14300/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    labels:
      - "description=YouTube Summary and Transcript Service"

  # Lead Research Service
  lead-research:
    build:
      context: ./lead_research
    container_name: lead-research-app
    ports:
      - "0.0.0.0:14400:14400"
    environment:
      # Google Gemini API configuration
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      # Database configuration
      - DB_USER=${DB_USER:-postgres}
      - DB_PASSWORD=${DB_PASSWORD:-Waterfront#1}
      - DB_HOST=${DB_HOST:-10.0.2.221}
      - DB_PORT=${DB_PORT:-5432}
      - DB_NAME=${DB_NAME:-postgres}
      # REW API configuration
      - REW_API_TOKEN=${REW_API_TOKEN}
      - REW_API_BASE_URL=${REW_API_BASE_URL:-https://api.realestatewebmasters.com}
      # Flask configuration
      - FLASK_ENV=${FLASK_ENV:-production}
      - PORT=14400
      # CrewAI configuration
      - CREW_AI_TIMEOUT=${CREW_AI_TIMEOUT:-1800}
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:14400/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s  # Longer start period due to AI model loading
    labels:
      - "description=Lead Research AI Service with CrewAI agents"

  # Send Email Service
  send-email:
    build:
      context: ./send_email
    container_name: send-email-app
    ports:
      - "0.0.0.0:14500:14500"
    environment:
      # SMTP configuration
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT:-587}
      - SMTP_SECURE=${SMTP_SECURE:-true}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      # Default sender configuration
      - FROM_EMAIL=${FROM_EMAIL}
      - FROM_NAME=${FROM_NAME:-Microservices Platform}
      # Flask configuration
      - FLASK_ENV=${FLASK_ENV:-production}
      - PORT=14500
      # Optional authentication
      - API_KEY=${EMAIL_API_KEY}
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:14500/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    labels:
      - "description=Email Service for sending notifications and messages"

  # Uptime Monitoring Service
  uptime-kuma:
    image: louislam/uptime-kuma:1
    container_name: uptime-kuma-app
    ports:
      - "0.0.0.0:14998:3001"
    volumes:
      - uptime-kuma-data:/app/data
      # Mount Docker socket for container monitoring
      - /var/run/docker.sock:/var/run/docker.sock:ro
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/entry-page"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    labels:
      - "description=Uptime Kuma Monitoring Dashboard"

  # Certbot for SSL Certificate Management
  certbot:
    image: certbot/certbot:latest
    container_name: certbot
    volumes:
      - ./ssl-certs:/etc/letsencrypt
      - ./ssl-webroot:/var/www/certbot
    command: certonly --webroot --webroot-path=/var/www/certbot --email admin@waterfront-ai.com --agree-tos --no-eff-email --keep-until-expiring -d services.waterfront-ai.com
    depends_on:
      - reverse-proxy

# Optional: Define a custom network for service communication
networks:
  default:
    name: microservices-network
    driver: bridge

# Optional: Define volumes for persistent data
volumes:
  app_data:
    driver: local
  uptime-kuma-data:
    driver: local